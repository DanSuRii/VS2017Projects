// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: liquiditaet.proto

#ifndef PROTOBUF_INCLUDED_liquiditaet_2eproto
#define PROTOBUF_INCLUDED_liquiditaet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_liquiditaet_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_liquiditaet_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_liquiditaet_2eproto();
class Info_LiquidPlan;
class Info_LiquidPlanDefaultTypeInternal;
extern Info_LiquidPlanDefaultTypeInternal _Info_LiquidPlan_default_instance_;
class Req_Liquidplan;
class Req_LiquidplanDefaultTypeInternal;
extern Req_LiquidplanDefaultTypeInternal _Req_Liquidplan_default_instance_;
class Res_Liquidplan;
class Res_LiquidplanDefaultTypeInternal;
extern Res_LiquidplanDefaultTypeInternal _Res_Liquidplan_default_instance_;
namespace google {
namespace protobuf {
template<> ::Info_LiquidPlan* Arena::CreateMaybeMessage<::Info_LiquidPlan>(Arena*);
template<> ::Req_Liquidplan* Arena::CreateMaybeMessage<::Req_Liquidplan>(Arena*);
template<> ::Res_Liquidplan* Arena::CreateMaybeMessage<::Res_Liquidplan>(Arena*);
}  // namespace protobuf
}  // namespace google

enum Res_Liquidplan_ESucceed {
  Res_Liquidplan_ESucceed_SUCCEED = 0,
  Res_Liquidplan_ESucceed_FAILURE = 1,
  Res_Liquidplan_ESucceed_Res_Liquidplan_ESucceed_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Res_Liquidplan_ESucceed_Res_Liquidplan_ESucceed_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Res_Liquidplan_ESucceed_IsValid(int value);
const Res_Liquidplan_ESucceed Res_Liquidplan_ESucceed_ESucceed_MIN = Res_Liquidplan_ESucceed_SUCCEED;
const Res_Liquidplan_ESucceed Res_Liquidplan_ESucceed_ESucceed_MAX = Res_Liquidplan_ESucceed_FAILURE;
const int Res_Liquidplan_ESucceed_ESucceed_ARRAYSIZE = Res_Liquidplan_ESucceed_ESucceed_MAX + 1;

const ::google::protobuf::EnumDescriptor* Res_Liquidplan_ESucceed_descriptor();
inline const ::std::string& Res_Liquidplan_ESucceed_Name(Res_Liquidplan_ESucceed value) {
  return ::google::protobuf::internal::NameOfEnum(
    Res_Liquidplan_ESucceed_descriptor(), value);
}
inline bool Res_Liquidplan_ESucceed_Parse(
    const ::std::string& name, Res_Liquidplan_ESucceed* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Res_Liquidplan_ESucceed>(
    Res_Liquidplan_ESucceed_descriptor(), name, value);
}
// ===================================================================

class Req_Liquidplan final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Req_Liquidplan) */ {
 public:
  Req_Liquidplan();
  virtual ~Req_Liquidplan();

  Req_Liquidplan(const Req_Liquidplan& from);

  inline Req_Liquidplan& operator=(const Req_Liquidplan& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_Liquidplan(Req_Liquidplan&& from) noexcept
    : Req_Liquidplan() {
    *this = ::std::move(from);
  }

  inline Req_Liquidplan& operator=(Req_Liquidplan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_Liquidplan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_Liquidplan* internal_default_instance() {
    return reinterpret_cast<const Req_Liquidplan*>(
               &_Req_Liquidplan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Req_Liquidplan* other);
  friend void swap(Req_Liquidplan& a, Req_Liquidplan& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_Liquidplan* New() const final {
    return CreateMaybeMessage<Req_Liquidplan>(nullptr);
  }

  Req_Liquidplan* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_Liquidplan>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_Liquidplan& from);
  void MergeFrom(const Req_Liquidplan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_Liquidplan* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Timestamp begin = 1;
  bool has_begin() const;
  void clear_begin();
  static const int kBeginFieldNumber = 1;
  const ::google::protobuf::Timestamp& begin() const;
  ::google::protobuf::Timestamp* release_begin();
  ::google::protobuf::Timestamp* mutable_begin();
  void set_allocated_begin(::google::protobuf::Timestamp* begin);

  // .google.protobuf.Timestamp end = 2;
  bool has_end() const;
  void clear_end();
  static const int kEndFieldNumber = 2;
  const ::google::protobuf::Timestamp& end() const;
  ::google::protobuf::Timestamp* release_end();
  ::google::protobuf::Timestamp* mutable_end();
  void set_allocated_end(::google::protobuf::Timestamp* end);

  // @@protoc_insertion_point(class_scope:Req_Liquidplan)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Timestamp* begin_;
  ::google::protobuf::Timestamp* end_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_liquiditaet_2eproto;
};
// -------------------------------------------------------------------

class Res_Liquidplan final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Res_Liquidplan) */ {
 public:
  Res_Liquidplan();
  virtual ~Res_Liquidplan();

  Res_Liquidplan(const Res_Liquidplan& from);

  inline Res_Liquidplan& operator=(const Res_Liquidplan& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Res_Liquidplan(Res_Liquidplan&& from) noexcept
    : Res_Liquidplan() {
    *this = ::std::move(from);
  }

  inline Res_Liquidplan& operator=(Res_Liquidplan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Res_Liquidplan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Res_Liquidplan* internal_default_instance() {
    return reinterpret_cast<const Res_Liquidplan*>(
               &_Res_Liquidplan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Res_Liquidplan* other);
  friend void swap(Res_Liquidplan& a, Res_Liquidplan& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Res_Liquidplan* New() const final {
    return CreateMaybeMessage<Res_Liquidplan>(nullptr);
  }

  Res_Liquidplan* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Res_Liquidplan>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Res_Liquidplan& from);
  void MergeFrom(const Res_Liquidplan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Res_Liquidplan* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Res_Liquidplan_ESucceed ESucceed;
  static const ESucceed SUCCEED =
    Res_Liquidplan_ESucceed_SUCCEED;
  static const ESucceed FAILURE =
    Res_Liquidplan_ESucceed_FAILURE;
  static inline bool ESucceed_IsValid(int value) {
    return Res_Liquidplan_ESucceed_IsValid(value);
  }
  static const ESucceed ESucceed_MIN =
    Res_Liquidplan_ESucceed_ESucceed_MIN;
  static const ESucceed ESucceed_MAX =
    Res_Liquidplan_ESucceed_ESucceed_MAX;
  static const int ESucceed_ARRAYSIZE =
    Res_Liquidplan_ESucceed_ESucceed_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ESucceed_descriptor() {
    return Res_Liquidplan_ESucceed_descriptor();
  }
  static inline const ::std::string& ESucceed_Name(ESucceed value) {
    return Res_Liquidplan_ESucceed_Name(value);
  }
  static inline bool ESucceed_Parse(const ::std::string& name,
      ESucceed* value) {
    return Res_Liquidplan_ESucceed_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Res_Liquidplan)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_liquiditaet_2eproto;
};
// -------------------------------------------------------------------

class Info_LiquidPlan final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Info_LiquidPlan) */ {
 public:
  Info_LiquidPlan();
  virtual ~Info_LiquidPlan();

  Info_LiquidPlan(const Info_LiquidPlan& from);

  inline Info_LiquidPlan& operator=(const Info_LiquidPlan& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Info_LiquidPlan(Info_LiquidPlan&& from) noexcept
    : Info_LiquidPlan() {
    *this = ::std::move(from);
  }

  inline Info_LiquidPlan& operator=(Info_LiquidPlan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Info_LiquidPlan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Info_LiquidPlan* internal_default_instance() {
    return reinterpret_cast<const Info_LiquidPlan*>(
               &_Info_LiquidPlan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Info_LiquidPlan* other);
  friend void swap(Info_LiquidPlan& a, Info_LiquidPlan& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Info_LiquidPlan* New() const final {
    return CreateMaybeMessage<Info_LiquidPlan>(nullptr);
  }

  Info_LiquidPlan* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Info_LiquidPlan>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Info_LiquidPlan& from);
  void MergeFrom(const Info_LiquidPlan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Info_LiquidPlan* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string UNCPath = 1;
  void clear_uncpath();
  static const int kUNCPathFieldNumber = 1;
  const ::std::string& uncpath() const;
  void set_uncpath(const ::std::string& value);
  #if LANG_CXX11
  void set_uncpath(::std::string&& value);
  #endif
  void set_uncpath(const char* value);
  void set_uncpath(const char* value, size_t size);
  ::std::string* mutable_uncpath();
  ::std::string* release_uncpath();
  void set_allocated_uncpath(::std::string* uncpath);

  // @@protoc_insertion_point(class_scope:Info_LiquidPlan)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uncpath_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_liquiditaet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Req_Liquidplan

// .google.protobuf.Timestamp begin = 1;
inline bool Req_Liquidplan::has_begin() const {
  return this != internal_default_instance() && begin_ != nullptr;
}
inline const ::google::protobuf::Timestamp& Req_Liquidplan::begin() const {
  const ::google::protobuf::Timestamp* p = begin_;
  // @@protoc_insertion_point(field_get:Req_Liquidplan.begin)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Req_Liquidplan::release_begin() {
  // @@protoc_insertion_point(field_release:Req_Liquidplan.begin)
  
  ::google::protobuf::Timestamp* temp = begin_;
  begin_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Req_Liquidplan::mutable_begin() {
  
  if (begin_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    begin_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Req_Liquidplan.begin)
  return begin_;
}
inline void Req_Liquidplan::set_allocated_begin(::google::protobuf::Timestamp* begin) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(begin_);
  }
  if (begin) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(begin)->GetArena();
    if (message_arena != submessage_arena) {
      begin = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, begin, submessage_arena);
    }
    
  } else {
    
  }
  begin_ = begin;
  // @@protoc_insertion_point(field_set_allocated:Req_Liquidplan.begin)
}

// .google.protobuf.Timestamp end = 2;
inline bool Req_Liquidplan::has_end() const {
  return this != internal_default_instance() && end_ != nullptr;
}
inline const ::google::protobuf::Timestamp& Req_Liquidplan::end() const {
  const ::google::protobuf::Timestamp* p = end_;
  // @@protoc_insertion_point(field_get:Req_Liquidplan.end)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Req_Liquidplan::release_end() {
  // @@protoc_insertion_point(field_release:Req_Liquidplan.end)
  
  ::google::protobuf::Timestamp* temp = end_;
  end_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Req_Liquidplan::mutable_end() {
  
  if (end_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    end_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Req_Liquidplan.end)
  return end_;
}
inline void Req_Liquidplan::set_allocated_end(::google::protobuf::Timestamp* end) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(end_);
  }
  if (end) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(end)->GetArena();
    if (message_arena != submessage_arena) {
      end = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    
  } else {
    
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:Req_Liquidplan.end)
}

// -------------------------------------------------------------------

// Res_Liquidplan

// -------------------------------------------------------------------

// Info_LiquidPlan

// string UNCPath = 1;
inline void Info_LiquidPlan::clear_uncpath() {
  uncpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Info_LiquidPlan::uncpath() const {
  // @@protoc_insertion_point(field_get:Info_LiquidPlan.UNCPath)
  return uncpath_.GetNoArena();
}
inline void Info_LiquidPlan::set_uncpath(const ::std::string& value) {
  
  uncpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Info_LiquidPlan.UNCPath)
}
#if LANG_CXX11
inline void Info_LiquidPlan::set_uncpath(::std::string&& value) {
  
  uncpath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Info_LiquidPlan.UNCPath)
}
#endif
inline void Info_LiquidPlan::set_uncpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uncpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Info_LiquidPlan.UNCPath)
}
inline void Info_LiquidPlan::set_uncpath(const char* value, size_t size) {
  
  uncpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Info_LiquidPlan.UNCPath)
}
inline ::std::string* Info_LiquidPlan::mutable_uncpath() {
  
  // @@protoc_insertion_point(field_mutable:Info_LiquidPlan.UNCPath)
  return uncpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Info_LiquidPlan::release_uncpath() {
  // @@protoc_insertion_point(field_release:Info_LiquidPlan.UNCPath)
  
  return uncpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Info_LiquidPlan::set_allocated_uncpath(::std::string* uncpath) {
  if (uncpath != nullptr) {
    
  } else {
    
  }
  uncpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uncpath);
  // @@protoc_insertion_point(field_set_allocated:Info_LiquidPlan.UNCPath)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Res_Liquidplan_ESucceed> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Res_Liquidplan_ESucceed>() {
  return ::Res_Liquidplan_ESucceed_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_liquiditaet_2eproto
