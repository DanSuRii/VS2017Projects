// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: liquiditaet.proto

#include "liquiditaet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
class Req_LiquidplanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_Liquidplan> _instance;
} _Req_Liquidplan_default_instance_;
class Res_LiquidplanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Res_Liquidplan> _instance;
} _Res_Liquidplan_default_instance_;
class Info_LiquidPlanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Info_LiquidPlan> _instance;
} _Info_LiquidPlan_default_instance_;
static void InitDefaultsReq_Liquidplan_liquiditaet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Req_Liquidplan_default_instance_;
    new (ptr) ::Req_Liquidplan();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Req_Liquidplan::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_Liquidplan_liquiditaet_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_Liquidplan_liquiditaet_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsRes_Liquidplan_liquiditaet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Res_Liquidplan_default_instance_;
    new (ptr) ::Res_Liquidplan();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Res_Liquidplan::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Res_Liquidplan_liquiditaet_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRes_Liquidplan_liquiditaet_2eproto}, {}};

static void InitDefaultsInfo_LiquidPlan_liquiditaet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Info_LiquidPlan_default_instance_;
    new (ptr) ::Info_LiquidPlan();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Info_LiquidPlan::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Info_LiquidPlan_liquiditaet_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInfo_LiquidPlan_liquiditaet_2eproto}, {}};

void InitDefaults_liquiditaet_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Req_Liquidplan_liquiditaet_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Res_Liquidplan_liquiditaet_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Info_LiquidPlan_liquiditaet_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_liquiditaet_2eproto[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_liquiditaet_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_liquiditaet_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_liquiditaet_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Req_Liquidplan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Req_Liquidplan, begin_),
  PROTOBUF_FIELD_OFFSET(::Req_Liquidplan, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Res_Liquidplan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Info_LiquidPlan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Info_LiquidPlan, uncpath_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Req_Liquidplan)},
  { 7, -1, sizeof(::Res_Liquidplan)},
  { 12, -1, sizeof(::Info_LiquidPlan)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Req_Liquidplan_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Res_Liquidplan_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Info_LiquidPlan_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_liquiditaet_2eproto = {
  {}, AddDescriptors_liquiditaet_2eproto, "liquiditaet.proto", schemas,
  file_default_instances, TableStruct_liquiditaet_2eproto::offsets,
  file_level_metadata_liquiditaet_2eproto, 3, file_level_enum_descriptors_liquiditaet_2eproto, file_level_service_descriptors_liquiditaet_2eproto,
};

const char descriptor_table_protodef_liquiditaet_2eproto[] =
  "\n\021liquiditaet.proto\032\037google/protobuf/tim"
  "estamp.proto\"d\n\016Req_Liquidplan\022)\n\005begin\030"
  "\001 \001(\0132\032.google.protobuf.Timestamp\022\'\n\003end"
  "\030\002 \001(\0132\032.google.protobuf.Timestamp\"6\n\016Re"
  "s_Liquidplan\"$\n\010ESucceed\022\013\n\007SUCCEED\020\000\022\013\n"
  "\007FAILURE\020\001\"\"\n\017Info_LiquidPlan\022\017\n\007UNCPath"
  "\030\001 \001(\tb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_liquiditaet_2eproto = {
  false, InitDefaults_liquiditaet_2eproto, 
  descriptor_table_protodef_liquiditaet_2eproto,
  "liquiditaet.proto", &assign_descriptors_table_liquiditaet_2eproto, 254,
};

void AddDescriptors_liquiditaet_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_google_2fprotobuf_2ftimestamp_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_liquiditaet_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_liquiditaet_2eproto = []() { AddDescriptors_liquiditaet_2eproto(); return true; }();
const ::google::protobuf::EnumDescriptor* Res_Liquidplan_ESucceed_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_liquiditaet_2eproto);
  return file_level_enum_descriptors_liquiditaet_2eproto[0];
}
bool Res_Liquidplan_ESucceed_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Res_Liquidplan_ESucceed Res_Liquidplan::SUCCEED;
const Res_Liquidplan_ESucceed Res_Liquidplan::FAILURE;
const Res_Liquidplan_ESucceed Res_Liquidplan::ESucceed_MIN;
const Res_Liquidplan_ESucceed Res_Liquidplan::ESucceed_MAX;
const int Res_Liquidplan::ESucceed_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Req_Liquidplan::InitAsDefaultInstance() {
  ::_Req_Liquidplan_default_instance_._instance.get_mutable()->begin_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::_Req_Liquidplan_default_instance_._instance.get_mutable()->end_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class Req_Liquidplan::HasBitSetters {
 public:
  static const ::google::protobuf::Timestamp& begin(const Req_Liquidplan* msg);
  static const ::google::protobuf::Timestamp& end(const Req_Liquidplan* msg);
};

const ::google::protobuf::Timestamp&
Req_Liquidplan::HasBitSetters::begin(const Req_Liquidplan* msg) {
  return *msg->begin_;
}
const ::google::protobuf::Timestamp&
Req_Liquidplan::HasBitSetters::end(const Req_Liquidplan* msg) {
  return *msg->end_;
}
void Req_Liquidplan::clear_begin() {
  if (GetArenaNoVirtual() == nullptr && begin_ != nullptr) {
    delete begin_;
  }
  begin_ = nullptr;
}
void Req_Liquidplan::clear_end() {
  if (GetArenaNoVirtual() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_Liquidplan::kBeginFieldNumber;
const int Req_Liquidplan::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_Liquidplan::Req_Liquidplan()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Req_Liquidplan)
}
Req_Liquidplan::Req_Liquidplan(const Req_Liquidplan& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_begin()) {
    begin_ = new ::google::protobuf::Timestamp(*from.begin_);
  } else {
    begin_ = nullptr;
  }
  if (from.has_end()) {
    end_ = new ::google::protobuf::Timestamp(*from.end_);
  } else {
    end_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Req_Liquidplan)
}

void Req_Liquidplan::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_Liquidplan_liquiditaet_2eproto.base);
  ::memset(&begin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&begin_)) + sizeof(end_));
}

Req_Liquidplan::~Req_Liquidplan() {
  // @@protoc_insertion_point(destructor:Req_Liquidplan)
  SharedDtor();
}

void Req_Liquidplan::SharedDtor() {
  if (this != internal_default_instance()) delete begin_;
  if (this != internal_default_instance()) delete end_;
}

void Req_Liquidplan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_Liquidplan& Req_Liquidplan::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_Liquidplan_liquiditaet_2eproto.base);
  return *internal_default_instance();
}


void Req_Liquidplan::Clear() {
// @@protoc_insertion_point(message_clear_start:Req_Liquidplan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && begin_ != nullptr) {
    delete begin_;
  }
  begin_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_Liquidplan::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_Liquidplan*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp begin = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_begin();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp end = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_end();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_Liquidplan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Req_Liquidplan)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Timestamp begin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_begin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Req_Liquidplan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Req_Liquidplan)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_Liquidplan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Req_Liquidplan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp begin = 1;
  if (this->has_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::begin(this), output);
  }

  // .google.protobuf.Timestamp end = 2;
  if (this->has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::end(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Req_Liquidplan)
}

::google::protobuf::uint8* Req_Liquidplan::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Req_Liquidplan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp begin = 1;
  if (this->has_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::begin(this), target);
  }

  // .google.protobuf.Timestamp end = 2;
  if (this->has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::end(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Req_Liquidplan)
  return target;
}

size_t Req_Liquidplan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Req_Liquidplan)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp begin = 1;
  if (this->has_begin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *begin_);
  }

  // .google.protobuf.Timestamp end = 2;
  if (this->has_end()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *end_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_Liquidplan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Req_Liquidplan)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_Liquidplan* source =
      ::google::protobuf::DynamicCastToGenerated<Req_Liquidplan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Req_Liquidplan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Req_Liquidplan)
    MergeFrom(*source);
  }
}

void Req_Liquidplan::MergeFrom(const Req_Liquidplan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Req_Liquidplan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_begin()) {
    mutable_begin()->::google::protobuf::Timestamp::MergeFrom(from.begin());
  }
  if (from.has_end()) {
    mutable_end()->::google::protobuf::Timestamp::MergeFrom(from.end());
  }
}

void Req_Liquidplan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Req_Liquidplan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_Liquidplan::CopyFrom(const Req_Liquidplan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Req_Liquidplan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_Liquidplan::IsInitialized() const {
  return true;
}

void Req_Liquidplan::Swap(Req_Liquidplan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_Liquidplan::InternalSwap(Req_Liquidplan* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(begin_, other->begin_);
  swap(end_, other->end_);
}

::google::protobuf::Metadata Req_Liquidplan::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_liquiditaet_2eproto);
  return ::file_level_metadata_liquiditaet_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Res_Liquidplan::InitAsDefaultInstance() {
}
class Res_Liquidplan::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Res_Liquidplan::Res_Liquidplan()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Res_Liquidplan)
}
Res_Liquidplan::Res_Liquidplan(const Res_Liquidplan& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Res_Liquidplan)
}

void Res_Liquidplan::SharedCtor() {
}

Res_Liquidplan::~Res_Liquidplan() {
  // @@protoc_insertion_point(destructor:Res_Liquidplan)
  SharedDtor();
}

void Res_Liquidplan::SharedDtor() {
}

void Res_Liquidplan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Res_Liquidplan& Res_Liquidplan::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Res_Liquidplan_liquiditaet_2eproto.base);
  return *internal_default_instance();
}


void Res_Liquidplan::Clear() {
// @@protoc_insertion_point(message_clear_start:Res_Liquidplan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Res_Liquidplan::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Res_Liquidplan*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Res_Liquidplan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Res_Liquidplan)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Res_Liquidplan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Res_Liquidplan)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Res_Liquidplan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Res_Liquidplan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Res_Liquidplan)
}

::google::protobuf::uint8* Res_Liquidplan::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Res_Liquidplan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Res_Liquidplan)
  return target;
}

size_t Res_Liquidplan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Res_Liquidplan)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Res_Liquidplan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Res_Liquidplan)
  GOOGLE_DCHECK_NE(&from, this);
  const Res_Liquidplan* source =
      ::google::protobuf::DynamicCastToGenerated<Res_Liquidplan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Res_Liquidplan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Res_Liquidplan)
    MergeFrom(*source);
  }
}

void Res_Liquidplan::MergeFrom(const Res_Liquidplan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Res_Liquidplan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Res_Liquidplan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Res_Liquidplan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Res_Liquidplan::CopyFrom(const Res_Liquidplan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Res_Liquidplan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Res_Liquidplan::IsInitialized() const {
  return true;
}

void Res_Liquidplan::Swap(Res_Liquidplan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Res_Liquidplan::InternalSwap(Res_Liquidplan* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Res_Liquidplan::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_liquiditaet_2eproto);
  return ::file_level_metadata_liquiditaet_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Info_LiquidPlan::InitAsDefaultInstance() {
}
class Info_LiquidPlan::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Info_LiquidPlan::kUNCPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Info_LiquidPlan::Info_LiquidPlan()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Info_LiquidPlan)
}
Info_LiquidPlan::Info_LiquidPlan(const Info_LiquidPlan& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uncpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uncpath().size() > 0) {
    uncpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uncpath_);
  }
  // @@protoc_insertion_point(copy_constructor:Info_LiquidPlan)
}

void Info_LiquidPlan::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Info_LiquidPlan_liquiditaet_2eproto.base);
  uncpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Info_LiquidPlan::~Info_LiquidPlan() {
  // @@protoc_insertion_point(destructor:Info_LiquidPlan)
  SharedDtor();
}

void Info_LiquidPlan::SharedDtor() {
  uncpath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Info_LiquidPlan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Info_LiquidPlan& Info_LiquidPlan::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Info_LiquidPlan_liquiditaet_2eproto.base);
  return *internal_default_instance();
}


void Info_LiquidPlan::Clear() {
// @@protoc_insertion_point(message_clear_start:Info_LiquidPlan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uncpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Info_LiquidPlan::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Info_LiquidPlan*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string UNCPath = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Info_LiquidPlan.UNCPath");
        object = msg->mutable_uncpath();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Info_LiquidPlan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Info_LiquidPlan)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string UNCPath = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uncpath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uncpath().data(), static_cast<int>(this->uncpath().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Info_LiquidPlan.UNCPath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Info_LiquidPlan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Info_LiquidPlan)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Info_LiquidPlan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Info_LiquidPlan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string UNCPath = 1;
  if (this->uncpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uncpath().data(), static_cast<int>(this->uncpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Info_LiquidPlan.UNCPath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uncpath(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Info_LiquidPlan)
}

::google::protobuf::uint8* Info_LiquidPlan::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Info_LiquidPlan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string UNCPath = 1;
  if (this->uncpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uncpath().data(), static_cast<int>(this->uncpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Info_LiquidPlan.UNCPath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uncpath(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Info_LiquidPlan)
  return target;
}

size_t Info_LiquidPlan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Info_LiquidPlan)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string UNCPath = 1;
  if (this->uncpath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uncpath());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Info_LiquidPlan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Info_LiquidPlan)
  GOOGLE_DCHECK_NE(&from, this);
  const Info_LiquidPlan* source =
      ::google::protobuf::DynamicCastToGenerated<Info_LiquidPlan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Info_LiquidPlan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Info_LiquidPlan)
    MergeFrom(*source);
  }
}

void Info_LiquidPlan::MergeFrom(const Info_LiquidPlan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Info_LiquidPlan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uncpath().size() > 0) {

    uncpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uncpath_);
  }
}

void Info_LiquidPlan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Info_LiquidPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Info_LiquidPlan::CopyFrom(const Info_LiquidPlan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Info_LiquidPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Info_LiquidPlan::IsInitialized() const {
  return true;
}

void Info_LiquidPlan::Swap(Info_LiquidPlan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Info_LiquidPlan::InternalSwap(Info_LiquidPlan* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uncpath_.Swap(&other->uncpath_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Info_LiquidPlan::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_liquiditaet_2eproto);
  return ::file_level_metadata_liquiditaet_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::Req_Liquidplan* Arena::CreateMaybeMessage< ::Req_Liquidplan >(Arena* arena) {
  return Arena::CreateInternal< ::Req_Liquidplan >(arena);
}
template<> PROTOBUF_NOINLINE ::Res_Liquidplan* Arena::CreateMaybeMessage< ::Res_Liquidplan >(Arena* arena) {
  return Arena::CreateInternal< ::Res_Liquidplan >(arena);
}
template<> PROTOBUF_NOINLINE ::Info_LiquidPlan* Arena::CreateMaybeMessage< ::Info_LiquidPlan >(Arena* arena) {
  return Arena::CreateInternal< ::Info_LiquidPlan >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
